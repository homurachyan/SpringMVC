<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!-- 加载properties配置文件 -->
	<context:property-placeholder location="classpath:WEB-INF/conf/jdbc.properties" ignore-unresolvable="true"/>

    <!-- 该 BeanPostProcessor 将自动对标注 @Autowired 的 Bean 进行注入 -->   
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <context:component-scan base-package="com.springmvc" >
      <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />  
    </context:component-scan>

	<!-- 数据源配置 -->
    <bean id="defaultDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
	    <property name="driverClassName">  
	        <value>${jdbc_driverClassName}</value>  
	    </property>  
	    <property name="url">  
	        <value>${jdbc_url}t</value>  
	    </property>  
	    <property name="username">  
	        <value>${jdbc_username}</value>  
	    </property>  
	    <property name="password">  
	        <value>${jdbc_password}</value>  
	    </property>  
	</bean>  
	
	<!-- 事务管理器 -->	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  <property name="dataSource" ref="defaultDataSource" />
	</bean>

<!-- 	<bean id="userDAOProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<property name="target">
			<ref bean="userDao" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="select*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
			</props>
		</property>
	</bean> -->
	<!-- 事务控制和AOP切入 -->	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	   <tx:attributes>
	     <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"/>
	     <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
	     <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
	
	   </tx:attributes>
	</tx:advice>	  
	<aop:config>    
	   <aop:pointcut id="ServiceMethods" expression="execution(* com.springmvc.service.impl.*.*(..))" />
	   <aop:advisor pointcut-ref="ServiceMethods" advice-ref="txAdvice" />
	</aop:config>
	
	<!-- mysbatis sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
	    <property name="dataSource" ref="defaultDataSource" />  
	    <property name="configLocation" value="classpath:WEB-INF/conf/mybatis/mybatis-config.xml"></property>  
	</bean>  
	<!-- mysbatis代理接口设置 -->
	<bean id="userDao" class="org.mybatis.spring.mapper.MapperFactoryBean">  
	    <property name="mapperInterface" value="com.springmvc.dao.UserDao"></property>  
	    <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>  
	</bean>  
	<!-- 引入同文件夹下的redis属性配置文件 -->
	<import resource="redis-context.xml"/>
</beans>


